group = "com.martialcoder"
version = "1.0.0"

// For publishing to Maven Central, GPG signing is required.
// You would typically add the 'signing' plugin and configure it.
plugins {
    id("com.android.library")
    alias(libs.plugins.jetbrains.kotlin.android)
    id("maven-publish")
    // id("signing") // TODO: Uncomment and configure for GPG signing. Use alias(libs.plugins.signing) if available.
}

android {
    namespace = "com.martialcoder.continuousspeechrecognizer"
    compileSdk = 34

    defaultConfig {
        minSdk = 24
        targetSdk = 34
        // versionCode and versionName are not used by library modules.
        // They are set at the top level for publishing.
        // versionCode = 1 
        // versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
}

publishing {
    publications {
        create<MavenPublication>("release") {
            // The group and version are already defined at the top level.
            // The artifactId will be the module name by default, which is 'continuousspeechrecognizer'.
            // You can explicitly set it if needed:
            // artifactId = "continuousspeechrecognizer" 

            // This tells the plugin to publish the components generated by the 'release' variant
            // of the Android library. The 'android.publishing' block we added earlier
            // makes these components available.
            afterEvaluate {
                from(components["release"])
            }

            // It's good practice to include POM metadata.
            // We'll add more details later (license, developer info, SCM) for remote publishing.
            pom {
                name.set("Continuous Speech Recognizer")
                description.set("An Android library for continuous speech recognition.")
                // url.set("https://github.com/yourusername/yourproject") // TODO: Replace with your project's URL

                // TODO: Configure license information
                // licenses {
                //     license {
                //         name.set("The Apache License, Version 2.0")
                //         url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                //     }
                // }

                // TODO: Configure developer information
                // developers {
                //     developer {
                //         id.set("yourusername")
                //         name.set("Your Name")
                //         email.set("youremail@example.com")
                //     }
                // }

                // TODO: Configure SCM (Source Control Management) information
                // scm {
                //     connection.set("scm:git:git://github.com/yourusername/yourproject.git")
                //     developerConnection.set("scm:git:ssh://github.com:yourusername/yourproject.git")
                //     url.set("https://github.com/yourusername/yourproject/tree/main") // Or the relevant branch
                // }
            }
        }
    }
    repositories {
        mavenLocal {
            // Publishes to the local Maven repository (typically ~/.m2/repository)
            // This is for testing purposes.
        }
        // TODO: Configure your remote repository here
        // maven {
        //     name = "MavenCentral" // Or "GitHubPackages", "Jitpack", etc.
        //     url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") // Example for Sonatype OSSRH (Maven Central)
        //     credentials {
        //         // Store credentials securely, e.g., in ~/.gradle/gradle.properties or environment variables
        //         // username = System.getenv("OSSRH_USERNAME") ?: project.findProperty("ossrhUsername") as String?
        //         // password = System.getenv("OSSRH_PASSWORD") ?: project.findProperty("ossrhPassword") as String?
        //     }
        // }
    }
}